name: Accepted
on:
  pull_request_target:
    types:
      - synchronize
      - labeled
env:
    PR_ID: ${{ github.event.pull_request.number }}
    GH_TOKEN: ${{ secrets.BOT_TOKEN }}
jobs:

  add-reviewed-by:
    if: github.event.label.name == 'Accepted' || contains(github.event.pull_request.labels.*.name, 'Accepted')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          # Fetch the entire history of the repository
          # This is necessary for a successful git push
          fetch-depth: 0
          # The pull request head branch is checked out
          # This is the branch that was merged or closed
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.BOT_TOKEN }}

      - name: Reviewed-by trailer was already added and pull request is accepted
        if: github.event.action == 'synchronize'
        run: |
          # Just succeed, as the pull request was updated by this job
          exit 0

      - name: Set git user identity
        if: github.event.action == 'labeled'
        run: |
          git config --global user.name "sssd-bot"
          git config --global user.email "sssd-maintainers@lists.fedoraproject.org"

      - name: Add 'Reviewed-by' trailer
        if: github.event.action == 'labeled'
        run: |
          set -ex -o pipefail

          PR_REVIEWERS=`gh pr view "$PR_ID" --json reviews --jq '.reviews.[] | select(.state == "APPROVED") | .author.login' | sort`
          PR_COMMITS_SHA=`gh pr view "$PR_ID" --json commits --jq .commits.[].oid`
          PR_COMMITS_FIRST=`echo "$PR_COMMITS_SHA" | head -1`

          git config trailer.where end
          git config trailer.ifexists addIfDifferent

          trailers=""
          for name in $PR_REVIEWERS; do
            #value=`jq -r --arg user "$name" '(.[] | select(.github_username == $user) | "\(.name) <\(.email)>") // "\($user) <https://github.com/\($user)>"' $AUTHORS_FILE`
            #trailers+="--trailer 'Reviewed-by: $value' "
            trailers+="--trailer 'Reviewed-by: $name <email>' "
          done

          if [ ! -z "$trailers" ]; then
              git rebase "$PR_COMMITS_FIRST~1" -x "git commit --amend --no-edit $trailers"
          fi

      - name: Add comment to print current CI status
        if: github.event.action == 'labeled'
        run: |
          set -ex -o pipefail

          gh pr checks "$PR_ID" --json state,workflow,name,link --jq '
            # First, sort the entire array by the "workflow" and "name" keys.
            sort_by(.workflow, .name) |

            # Then, iterate over each element in the sorted array.
            .[] |

            # A conditional check to determine the icon based on the state.
            (if .state == "FAILURE" then "üî¥"
            elif .state == "SUCCESS" then "üü¢"
            elif .state == "CANCELLED" then "‚ö™"
            elif .state == "IN_PROGRESS" then "üü°"
            elif .state == "PENDING" then "‚è≥"
            elif .state == "SKIPPED" then "‚ûñ"
            else .state
            end
            ) as $icon |

            # Another conditional check to format the output.
            # If the workflow is an empty string, print a simplified format.
            # Otherwise, print the full format including the workflow.
            if .workflow == "" then
                "\($icon) \(.state)\t[\(.name)](\(.link))"
            else
                "\($icon) \(.state)\t[\(.workflow) / \(.name)](\(.link))"
            end
          ' | gh pr comment "$PR_ID" --body-file -

      - name: Push changes
        if: github.event.action == 'labeled'
        run: git push origin HEAD --force

